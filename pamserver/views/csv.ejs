<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel="stylesheet" href="/leaflet/leaflet.css"/>
    <link rel='stylesheet' href='/css/csv.css'/>
</head>
<body>
<div id="map">
</div>
<div id="sidebar">
    <div id="title">
        <h1>CartoChrono</h1>
    </div>
    <div id="legend">
        <p>Paste CSV data below:</p>
        <p>(tag, time, lat, long)</p>
    </div>
    <textarea id="csv_input">CAR1,2016-05-30T18:55:27.991Z,51.509477,-0.080059
CAR1,2016-05-30T18:55:29.824Z,51.509197,-0.080702
CAR1,2016-05-30T18:55:30.900Z,51.509036,-0.081518
CAR1,2016-05-30T18:55:31.867Z,51.508983,-0.082462
CAR1,2016-05-30T18:55:33.140Z,51.509183,-0.083792
CAR1,2016-05-30T18:55:36.057Z,51.509477,-0.085917
CAR1,2016-05-30T18:55:36.990Z,51.509504,-0.086582
CAR0,2016-05-30T18:55:39.547Z,51.506232,-0.088513
CAR1,2016-05-30T18:55:39.754Z,51.509624,-0.087526
CAR1,2016-05-30T18:55:40.890Z,51.509691,-0.088127
CAR0,2016-05-30T18:55:42.072Z,51.507086,-0.088105
CAR1,2016-05-30T18:55:42.187Z,51.509878,-0.088985
CAR0,2016-05-30T18:55:43.834Z,51.507941,-0.087826
CAR1,2016-05-30T18:55:43.196Z,51.510011,-0.089586
CAR0,2016-05-30T18:55:45.602Z,51.508836,-0.087504
CAR0,2016-05-30T18:55:46.850Z,51.509584,-0.087161
CAR0,2016-05-30T18:55:49.555Z,51.510519,-0.086904
CAR1,2016-05-30T18:55:50.439Z,51.510759,-0.089242
CAR1,2016-05-30T18:55:51.882Z,51.510906,-0.089586
CAR0,2016-05-30T18:55:56.853Z,51.510746,-0.085251
CAR0,2016-05-30T18:55:58.259Z,51.510746,-0.084629
CAR1,2016-05-30T18:55:59.537Z,51.511200,-0.087998
CAR0,2016-05-30T18:56:01.547Z,51.510625,-0.083320
CAR0,2016-05-30T18:56:03.145Z,51.510318,-0.082397
CAR0,2016-05-30T18:56:04.402Z,51.510131,-0.081668
CAR0,2016-05-30T18:56:05.619Z,51.509757,-0.080831
CAR0,2016-05-30T18:56:06.570Z,51.509611,-0.079865
CAR0,2016-05-30T18:56:07.636Z,51.509517,-0.078685
CAR1,2016-05-30T18:56:09.004Z,51.510906,-0.086753
CAR0,2016-05-30T18:56:10.136Z,51.509424,-0.077398
CAR1,2016-05-30T18:56:10.313Z,51.510679,-0.085251
CAR1,2016-05-30T18:56:11.641Z,51.510625,-0.083899
CAR1,2016-05-30T18:56:12.968Z,51.510492,-0.082548
CAR0,2016-05-30T18:56:13.335Z,51.509717,-0.075595
CAR1,2016-05-30T18:56:15.602Z,51.509744,-0.080509
CAR0,2016-05-30T18:56:16.865Z,51.509637,-0.074286
CAR1,2016-05-30T18:56:17.482Z,51.509557,-0.079951
CAR0,2016-05-30T18:56:18.366Z,51.509277,-0.073771
CAR1,2016-05-30T18:56:21.203Z,51.509517,-0.079994
CAR0,2016-05-30T18:56:22.067Z,51.508742,-0.073879
CAR0,2016-05-30T18:56:23.717Z,51.507914,-0.074029
CAR0,2016-05-30T18:56:26.314Z,51.507046,-0.074308
CAR0,2016-05-30T18:56:27.586Z,51.506472,-0.074608
CAR0,2016-05-30T18:56:28.717Z,51.506085,-0.074909
CAR0,2016-05-30T18:56:29.722Z,51.505684,-0.075102
CAR0,2016-05-30T18:56:31.850Z,51.505016,-0.075617
CAR0,2016-05-30T18:56:32.993Z,51.504575,-0.075939
CAR0,2016-05-30T18:56:34.999Z,51.503908,-0.076582
CAR0,2016-05-30T18:56:36.299Z,51.503373,-0.076604
CAR0,2016-05-30T18:56:38.569Z,51.502946,-0.076904
CAR0,2016-05-30T18:56:39.798Z,51.502812,-0.077076
CAR0,2016-05-30T18:56:41.065Z,51.502999,-0.078299
CAR0,2016-05-30T18:56:42.566Z,51.503454,-0.080080
CAR1,2016-05-30T18:55:43.964Z,51.510118,-0.089736
CAR0,2016-05-30T18:56:44.232Z,51.503801,-0.081153
CAR0,2016-05-30T18:56:45.641Z,51.504322,-0.082548
CAR0,2016-05-30T18:56:46.785Z,51.504803,-0.083771
CAR0,2016-05-30T18:56:48.148Z,51.505337,-0.084951
CAR0,2016-05-30T18:56:49.392Z,51.505778,-0.086281
CAR0,2016-05-30T18:56:50.313Z,51.505924,-0.087183
CAR0,2016-05-30T18:56:51.384Z,51.506098,-0.088449
CAR0,2016-05-30T18:56:52.721Z,51.506218,-0.088577</textarea>
    <div id="controls">
        <fieldset>
            <legend><label>capture: <input type="checkbox" id="capture_checkbox">&nbsp;</label></legend>
            <label>tag:<input type="text" id="capture_tag" value="CAPTURED"></label>
            <p>lat/long: <span id="capture_latlng"></span></p>
        </fieldset>
        <fieldset>
            <legend>time control</legend>
            <span id="time_slider_start">s</span>
            <span id="time_slider_finish">f</span>
            <input type="range" name="points" id="time_slider" value="50" min="0" max="100">
        </fieldset>
    </div>
</div>
<script src="/leaflet/leaflet.js"></script>
<script>
    function Fix(tag, ts, lat, lng) {
        this.tag = tag;
        var tsAsInt = parseInt(ts, 10);
        if ('' + tsAsInt === ts) { // it's an integer
            if (tsAsInt > 4000000000) { // *probably* in ms
                this.ts = tsAsInt;
            } else { // in seconds?
                this.ts = tsAsInt * 1000;
            }
        } else if (Date.parse(ts)) {
            this.ts = new Date(ts).getTime();
        } else {
            this.ts = 0; // don't break the slider control with null values
        }
        this.lat = parseFloat(lat,10);
        this.lng = parseFloat(lng,10);
    }

    Fix.prototype.asLatLng = function() {
        return [this.lat, this.lng];
    }

    function Resource(tag) {
        this.tag = tag;
        this.fixes = [];
    }

    Resource.prototype.addFix = function(fix) {
        this.fixes.push(fix);
        // keep fixes sorted by timestamp
        this.fixes.sort(function(a, b) {
            if (a.ts > b.ts) return 1;
            if (a.ts < b.ts) return -1;
            return 0;
        });
    }

    Resource.prototype.getPolyline = function() {
        var polyline = [];
        for (var i in this.fixes) {
            var fix = this.fixes[i];
            polyline.push([fix.lat, fix.lng]);
        }
        return polyline;
    }

    Resource.prototype.getFixBeforeOrAt = function(ts) {
        // resources whose first data is after ts will be show in their earliest known position
        var last = this.fixes[0];

        for (var i in this.fixes) {
            if (this.fixes[i].ts > ts) return last;
            last = this.fixes[i];
        }
        return last;
    }

    // a container for multiple resources
    function Fleet(map, time_slider, time_slider_start, time_slider_finish) {
        this.map = map;
        this.time_slider = time_slider;
        this.time_slider_start = time_slider_start;
        this.time_slider_finish = time_slider_finish;
        this.resources = {};
        this.allFixes = [];

        // UI stuff
        this.multiPolyline = null;
        this.markersByTag = {};
        this.scaleToFit = true;
    }

    Fleet.prototype.addFix = function(fix) {
        if (!this.resources[fix.tag]) this.resources[fix.tag] = new Resource(fix.tag);
        this.resources[fix.tag].addFix(fix);

        this.allFixes.push(fix);
        // keep fixes sorted by timestamp
        this.allFixes.sort(function(a, b) {
            if (a.ts > b.ts) return 1;
            if (a.ts < b.ts) return -1;
            return 0;
        });
    }

    Fleet.prototype.undraw = function() {
        if (this.multiPolyline != null) {
            this.map.removeLayer(this.multiPolyline);
        }
        for (var tag in this.markersByTag) {
            this.map.removeLayer(this.markersByTag[tag]);
            delete this.markersByTag[tag];
        }
    }

    Fleet.prototype.parseCsv = function(text) {
        console.log(text);

        this.resources = {};
        this.allFixes = [];

        var lines = text.split(/[\n\r]/);
        for (var i in lines) {
            var fields = lines[i].split(',');
            if (fields.length < 4) continue;
            var tag = fields[0];
            var fix = new Fix(tag, fields[1], fields[2], fields[3]);
            this.addFix(fix);
        }
    }

    Fleet.prototype.redraw = function() {
        var polylines = [];
        for (var tag in this.resources) {
            polylines.push(this.resources[tag].getPolyline());
        }

        var latLngs = [];
        for (var i in this.allFixes) {
            var fix = this.allFixes[i];
            latLngs.push(fix.asLatLng());
        }
        if (this.scaleToFit) {
            var bounds = new L.LatLngBounds(latLngs);
            this.map.fitBounds(bounds);
        }

        this.multiPolyline = L.multiPolyline(polylines);
        this.multiPolyline.addTo(this.map);

        // set slider
        if (this.allFixes.length > 1) {
            this.time_slider.setAttribute('min', this.allFixes[0].ts);
            this.time_slider.setAttribute('max', this.allFixes[this.allFixes.length - 1].ts);
            this.time_slider.setAttribute('value', this.allFixes[this.allFixes.length - 1].ts);

            var start = new Date(this.allFixes[0].ts).toISOString();
            this.time_slider_start.innerHTML = start.substr(11,8);
            var finish = new Date(this.allFixes[this.allFixes.length - 1].ts).toISOString();
            this.time_slider_finish.innerHTML = finish.substr(11,8);
        }
    }

    // display markers for the fleet, as at a particular time
    Fleet.prototype.asAt = function(ts) {
        console.log('asAt', ts);
        for (var tag in this.resources) {
            var latLng = this.resources[tag].getFixBeforeOrAt(ts);
            if (!this.markersByTag[tag]) {
                var html = '<div class="tag_main">' + tag + '</div><div class="triangle"></div>';
                var icon = L.divIcon({html: html, className: 'tag_icon', iconAnchor: [0,44]});
                this.markersByTag[tag] = L.marker(latLng, {icon: icon});
                this.markersByTag[tag].addTo(this.map);
            } else {
                this.markersByTag[tag].setLatLng(latLng);
            }
        }
    }

    Fleet.prototype.updateCsv = function(csv) {
        this.undraw();
        this.parseCsv(csv);
        this.redraw();
    }

    function main() {
        var map = L.map('map').setView([51.505, -0.09], 11);
        var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
        var osmAttrib = 'Map data Â© <a href="http://openstreetmap.org">OpenStreetMap</a> contributors';
        L.tileLayer(osmUrl, {minZoom: 1, maxZoom: 18, attribution: osmAttrib}).addTo(map);

        var csv_input = document.querySelectorAll('#csv_input')[0];
        var time_slider = document.querySelectorAll('#time_slider')[0];
        var time_slider_start = document.querySelectorAll('#time_slider_start')[0];
        var time_slider_finish = document.querySelectorAll('#time_slider_finish')[0];
        var fleet = new Fleet(map, time_slider, time_slider_start, time_slider_finish);
        csv_input.addEventListener('keyup', function(arg) {
            console.log('keyup');
            fleet.updateCsv(csv_input.value);
            fleet.asAt(Number.MAX_VALUE);
        });
        csv_input.addEventListener('change', function(arg) {
            console.log('change');
            fleet.updateCsv(csv_input.value);
            fleet.asAt(Number.MAX_VALUE);
        });
        time_slider.addEventListener('change', function(arg) {
            console.log('time_slider change', arg);
            fleet.asAt(time_slider.value);
        })


        var map_div = document.querySelectorAll('#map_div')[0];
        var capture_checkbox = document.querySelectorAll('#capture_checkbox')[0];
        capture_checkbox.checked = false;
        var capture_tag = document.querySelectorAll('#capture_tag')[0];
        var capture_latlng = document.querySelectorAll('#capture_latlng')[0];
        function handleMouseMove(event) {
            console.log('map mousemove', event.latlng);
            capture_latlng.innerHTML = event.latlng.lat.toFixed(6) + ',' + event.latlng.lng.toFixed(6);
        }
        function handleClick(event) {
            console.log('map mousemove', event.latlng);
            csv_input.value += '\n' + capture_tag.value + ',' + new Date().toISOString() + ',' + event.latlng.lat.toFixed(6) + ',' + event.latlng.lng.toFixed(6);
            csv_input.scrollTop = csv_input.scrollHeight;
            fleet.updateCsv(csv_input.value);
            fleet.asAt(Number.MAX_VALUE);
        }
        capture_checkbox.addEventListener('change', function(arg) {
            console.log('capture_checkbox', capture_checkbox.checked);
            if (capture_checkbox.checked) {
                map.on('mousemove', handleMouseMove);
                map.on('click', handleClick);
                map_div.style.cursor = 'crosshair';
                fleet.scaleToFit = false;
            } else {
                map.off('mousemove', handleMouseMove);
                map.off('click', handleClick);
                fleet.scaleToFit = true;
            }
        });

        // display data when page loads
        fleet.updateCsv(csv_input.value);
        fleet.asAt(Number.MAX_VALUE);
    }

    main();

</script>
</body>
</html>
