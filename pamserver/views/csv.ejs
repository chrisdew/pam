<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel="stylesheet" href="/leaflet/leaflet.css"/>
    <link rel='stylesheet' href='/css/csv.css'/>
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
</head>
<body>
<div id="map">
</div>
<div id="sidebar">
    <div id="title">
        <h1>CartoChrono</h1>
    </div>
    <div id="legend">
        <p>Clear and paste CSV data below:</p>
        <p>(tag, time, lat, long) <button id="button_clear">clear</button></p>
        <p>No data is sent across the network.</p>
    </div>
    <textarea id="csv_input">TAXI,1464634529,51.509477,-0.080059
TAXI,1464634529,51.509197,-0.080702
TAXI,1464634530,51.509036,-0.081518
TAXI,1464634531,51.508983,-0.082462
TAXI,1464634533,51.509183,-0.083792
TAXI,1464634536,51.509477,-0.085917
TAXI,1464634537,51.509504,-0.086582
BUS,2016-05-30T18:55:39Z,51.506232,-0.088513
TAXI,1464634539,51.509624,-0.087526
TAXI,1464634540,51.509691,-0.088127
BUS,2016-05-30T18:55:42Z,51.507086,-0.088105
TAXI,1464634542,51.509878,-0.088985
BUS,2016-05-30T18:55:43Z,51.507941,-0.087826
TAXI,1464634543,51.510011,-0.089586
BUS,2016-05-30T18:55:45Z,51.508836,-0.087504
BUS,2016-05-30T18:55:46Z,51.509584,-0.087161
BUS,2016-05-30T18:55:49Z,51.510519,-0.086904
TAXI,1464634550,51.510759,-0.089242
TAXI,1464634551,51.510906,-0.089586
BUS,2016-05-30T18:55:56Z,51.510746,-0.085251
BUS,2016-05-30T18:55:58Z,51.510746,-0.084629
TAXI,1464634559,51.511200,-0.087998
BUS,2016-05-30T18:56:01Z,51.510625,-0.083320
BUS,2016-05-30T18:56:03Z,51.510318,-0.082397
BUS,2016-05-30T18:56:04Z,51.510131,-0.081668
BUS,2016-05-30T18:56:05Z,51.509757,-0.080831
BUS,2016-05-30T18:56:06Z,51.509611,-0.079865
BUS,2016-05-30T18:56:07Z,51.509517,-0.078685
TAXI,1464634569,51.510906,-0.086753
BUS,2016-05-30T18:56:10Z,51.509424,-0.077398
TAXI,1464634570,51.510679,-0.085251
TAXI,1464634571,51.510625,-0.083899
TAXI,1464634572,51.510492,-0.082548
BUS,2016-05-30T18:56:13Z,51.509717,-0.075595
TAXI,1464634575,51.509744,-0.080509
BUS,2016-05-30T18:56:16Z,51.509637,-0.074286
TAXI,1464634577,51.509557,-0.079951
BUS,2016-05-30T18:56:18Z,51.509277,-0.073771
TAXI,1464634581,51.509517,-0.079994
BUS,2016-05-30T18:56:22Z,51.508742,-0.073879
BUS,2016-05-30T18:56:23Z,51.507914,-0.074029
BUS,2016-05-30T18:56:26Z,51.507046,-0.074308
BUS,2016-05-30T18:56:27Z,51.506472,-0.074608
BUS,2016-05-30T18:56:28Z,51.506085,-0.074909
BUS,2016-05-30T18:56:29Z,51.505684,-0.075102
BUS,2016-05-30T18:56:31Z,51.505016,-0.075617
BUS,2016-05-30T18:56:32Z,51.504575,-0.075939
BUS,2016-05-30T18:56:34Z,51.503908,-0.076582
BUS,2016-05-30T18:56:36Z,51.503373,-0.076604
BUS,2016-05-30T18:56:38Z,51.502946,-0.076904
BUS,2016-05-30T18:56:39Z,51.502812,-0.077076
BUS,2016-05-30T18:56:41Z,51.502999,-0.078299
BUS,2016-05-30T18:56:42Z,51.503454,-0.080080
TAXI,1464634543,51.510118,-0.089736
BUS,2016-05-30T18:56:44Z,51.503801,-0.081153
BUS,2016-05-30T18:56:45Z,51.504322,-0.082548
BUS,2016-05-30T18:56:46Z,51.504803,-0.083771
BUS,2016-05-30T18:56:48Z,51.505337,-0.084951
BUS,2016-05-30T18:56:49Z,51.505778,-0.086281
BUS,2016-05-30T18:56:50Z,51.505924,-0.087183
BUS,2016-05-30T18:56:51Z,51.506098,-0.088449
BUS,2016-05-30T18:56:52Z,51.506218,-0.088577

BOAT,2016-05-30T18:55:59Z,51.506926,-0.084629
BOAT,2016-05-30T18:56:01Z,51.506886,-0.084071
BOAT,2016-05-30T18:56:02Z,51.506939,-0.083385
BOAT,2016-05-30T18:56:04Z,51.506953,-0.082955
BOAT,2016-05-30T18:56:05Z,51.507033,-0.082483
BOAT,2016-05-30T18:56:07Z,51.507086,-0.081947
BOAT,2016-05-30T18:56:08Z,51.507167,-0.081518
BOAT,2016-05-30T18:56:10Z,51.507247,-0.081003
BOAT,2016-05-30T18:56:11Z,51.507300,-0.080445
BOAT,2016-05-30T18:56:12Z,51.507367,-0.079951
BOAT,2016-05-30T18:56:17Z,51.507367,-0.079565
BOAT,2016-05-30T18:56:18Z,51.507300,-0.079157
BOAT,2016-05-30T18:56:21Z,51.507207,-0.078685
BOAT,2016-05-30T18:56:30Z,51.506966,-0.078149
BOAT,2016-05-30T18:56:31Z,51.506699,-0.077655
BOAT,2016-05-30T18:56:32Z,51.506525,-0.077398
BOAT,2016-05-30T18:56:33Z,51.506125,-0.076818
BOAT,2016-05-30T18:56:34Z,51.505844,-0.076389
BOAT,2016-05-30T18:56:35Z,51.505644,-0.075788
BOAT,2016-05-30T18:56:36Z,51.505510,-0.075295
BOAT,2016-05-30T18:56:37Z,51.505377,-0.074801
BOAT,2016-05-30T18:56:38Z,51.505257,-0.074093
BOAT,2016-05-30T18:56:39Z,51.505030,-0.073450
BOAT,2016-05-30T18:56:41Z,51.504856,-0.072892
BOAT,2016-05-30T18:56:43Z,51.505537,-0.072892
BOAT,2016-05-30T18:56:44Z,51.505684,-0.072999
BOAT,2016-05-30T18:56:44Z,51.505858,-0.073321
BOAT,2016-05-30T18:56:45Z,51.505978,-0.073557
BOAT,2016-05-30T18:56:53Z,51.506111,-0.074222
BOAT,2016-05-30T18:56:54Z,51.506125,-0.074480
BOAT,2016-05-30T18:56:55Z,51.506192,-0.075467
BOAT,2016-05-30T18:56:55Z,51.506205,-0.076089
BOAT,2016-05-30T18:56:56Z,51.506178,-0.076754
BOAT,2016-05-30T18:56:57Z,51.506178,-0.077462
BOAT,2016-05-30T18:56:57Z,51.506312,-0.078192
BOAT,2016-05-30T18:56:58Z,51.506499,-0.078900
BOAT,2016-05-30T18:56:59Z,51.506606,-0.079565
BOAT,2016-05-30T18:57:03Z,51.506779,-0.080402
BOAT,2016-05-30T18:57:04Z,51.506926,-0.080960
BOAT,2016-05-30T18:57:05Z,51.507046,-0.081539
BOAT,2016-05-30T18:57:06Z,51.507180,-0.082355
BOAT,2016-05-30T18:57:08Z,51.507273,-0.083148
BOAT,2016-05-30T18:57:08Z,51.507500,-0.083878
BOAT,2016-05-30T18:57:09Z,51.507874,-0.084071
BOAT,2016-05-30T18:57:10Z,51.508248,-0.084457
BOAT,2016-05-30T18:57:11Z,51.508475,-0.084801
BOAT,2016-05-30T18:57:11Z,51.508582,-0.085273
BOAT,2016-05-30T18:57:12Z,51.508636,-0.085959
BOAT,2016-05-30T18:57:16Z,51.508676,-0.086281
BOAT,2016-05-30T18:57:17Z,51.508222,-0.086260
BOAT,2016-05-30T18:57:18Z,51.507834,-0.086131
BOAT,2016-05-30T18:57:19Z,51.507220,-0.085595
BOAT,2016-05-30T18:57:20Z,51.507140,-0.085337
BOAT,2016-05-30T18:57:21Z,51.506939,-0.084715
    </textarea>
    <div id="controls">
        <fieldset>
            <legend><label>capture: <input type="checkbox" id="capture_checkbox">&nbsp;</label></legend>
            <label>tag:<input type="text" id="capture_tag" value="TAG"></label>
            <p>lat/long: <span id="capture_latlng"></span></p>
        </fieldset>
        <fieldset>
            <legend>time control</legend>
            <span id="time_slider_start">s</span>
            <span id="time_slider_finish">f</span>
            <input type="range" name="points" id="time_slider" value="50" min="0" max="100">
            <button id="playpause"><i id="playpause_i" class="fa fa-play"></i></button>
            <button id="to_start"><i class="fa fa-fast-backward"></i></button>
            <button id="step_backward"><i class="fa fa-step-backward"></i></button>
            <button id="step_forward"><i class="fa fa-step-forward"></i></button>
            <button id="to_finish"><i class="fa fa-fast-forward"></i></button>
        </fieldset>
        <fieldset>
            <legend>about</legend>
            <p>Please <a href="mailto:chris@cartochrono.com">email me</a> when you find bugs or have ideas for new features.</p>
        </fieldset>
    </div>
</div>
<script src="/leaflet/leaflet.js"></script>
<script>
    function Fix(tag, ts, lat, lng) {
        this.tag = tag;
        var tsAsInt = parseInt(ts, 10);
        if ('' + tsAsInt === ts) { // it's an integer
            if (tsAsInt > 4000000000) { // *probably* in ms
                this.ts = tsAsInt;
            } else { // in seconds?
                this.ts = tsAsInt * 1000;
            }
        } else if (Date.parse(ts)) {
            this.ts = new Date(ts).getTime();
        } else {
            this.ts = 0; // don't break the slider control with null values
        }
        this.lat = parseFloat(lat,10);
        this.lng = parseFloat(lng,10);
    }

    Fix.prototype.asLatLng = function() {
        return [this.lat, this.lng];
    }

    function Resource(tag) {
        this.tag = tag;
        this.fixes = [];
    }

    Resource.prototype.addFix = function(fix) {
        this.fixes.push(fix);
        // keep fixes sorted by timestamp
        this.fixes.sort(function(a, b) {
            if (a.ts > b.ts) return 1;
            if (a.ts < b.ts) return -1;
            return 0;
        });
    }

    Resource.prototype.getPolyline = function() {
        var polyline = [];
        for (var i in this.fixes) {
            var fix = this.fixes[i];
            polyline.push([fix.lat, fix.lng]);
        }
        return polyline;
    }

    Resource.prototype.getFixBeforeOrAt = function(ts) {
        // resources whose first data is after ts will be show in their earliest known position
        var last = this.fixes[0];

        for (var i in this.fixes) {
            if (this.fixes[i].ts > ts) return last;
            last = this.fixes[i];
        }
        return last;
    }

    // a container for multiple resources
    function Fleet(map, time_slider, time_slider_start, time_slider_finish) {
        this.map = map;
        this.time_slider = time_slider;
        this.time_slider_start = time_slider_start;
        this.time_slider_finish = time_slider_finish;
        this.resources = {};
        this.allFixes = [];

        // UI stuff
        this.multiPolyline = null;
        this.markersByTag = {};
        this.scaleToFit = true;
    }

    Fleet.prototype.addFix = function(fix) {
        if (!this.resources[fix.tag]) this.resources[fix.tag] = new Resource(fix.tag);
        this.resources[fix.tag].addFix(fix);

        this.allFixes.push(fix);
        // keep fixes sorted by timestamp
        this.allFixes.sort(function(a, b) {
            if (a.ts > b.ts) return 1;
            if (a.ts < b.ts) return -1;
            return 0;
        });
    }

    Fleet.prototype.undraw = function() {
        if (this.multiPolyline != null) {
            this.map.removeLayer(this.multiPolyline);
        }
        for (var tag in this.markersByTag) {
            this.map.removeLayer(this.markersByTag[tag]);
            delete this.markersByTag[tag];
        }
    }

    Fleet.prototype.parseCsv = function(text) {
        console.log(text);

        this.resources = {};
        this.allFixes = [];

        var lines = text.split(/[\n\r]/);
        for (var i in lines) {
            var fields = lines[i].split(',');
            if (fields.length < 4) continue;
            var tag = fields[0];
            var fix = new Fix(tag, fields[1], fields[2], fields[3]);
            this.addFix(fix);
        }
    }

    Fleet.prototype.redraw = function() {
        var polylines = [];
        for (var tag in this.resources) {
            polylines.push(this.resources[tag].getPolyline());
        }

        var latLngs = [];
        for (var i in this.allFixes) {
            var fix = this.allFixes[i];
            latLngs.push(fix.asLatLng());
        }
        if (this.scaleToFit) {
            var bounds = new L.LatLngBounds(latLngs);
            this.map.fitBounds(bounds);
        }

        this.multiPolyline = L.multiPolyline(polylines);
        this.multiPolyline.addTo(this.map);

        // set slider
        if (this.allFixes.length > 1) {
            this.time_slider.setAttribute('min', this.allFixes[0].ts);
            this.time_slider.setAttribute('max', this.allFixes[this.allFixes.length - 1].ts);
            this.time_slider.setAttribute('value', this.allFixes[this.allFixes.length - 1].ts);

            var start = new Date(this.allFixes[0].ts).toISOString();
            this.time_slider_start.innerHTML = start.substr(11,8);
            var finish = new Date(this.allFixes[this.allFixes.length - 1].ts).toISOString();
            this.time_slider_finish.innerHTML = finish.substr(11,8);
        }
    }

    // display markers for the fleet, as at a particular time
    Fleet.prototype.asAt = function(ts) {
        console.log('asAt', ts);
        for (var tag in this.resources) {
            var latLng = this.resources[tag].getFixBeforeOrAt(ts);
            if (!this.markersByTag[tag]) {
                var html = '<div class="tag_main">' + tag + '</div><div class="triangle"></div>';
                var icon = L.divIcon({html: html, className: 'tag_icon', iconAnchor: [0,44]});
                this.markersByTag[tag] = L.marker(latLng, {icon: icon});
                this.markersByTag[tag].addTo(this.map);
            } else {
                this.markersByTag[tag].setLatLng(latLng);
            }
        }
    }

    Fleet.prototype.updateCsv = function(csv) {
        this.undraw();
        this.parseCsv(csv);
        this.redraw();
    }

    function Player(fleet) {
        this.fleet = fleet;
        this.state = "PAUSED";
        this.pos = fleet.allFixes.length - 1;
        this.time_slider = document.querySelectorAll('#time_slider')[0];
        this.time_slider_start = document.querySelectorAll('#time_slider_start')[0];
        this.time_slider_finish = document.querySelectorAll('#time_slider_finish')[0];
        this.playpause = document.querySelectorAll('#playpause')[0];
        this.playpause_i = document.querySelectorAll('#playpause_i')[0];
        this.to_start = document.querySelectorAll('#to_start')[0];
        this.step_backward = document.querySelectorAll('#step_backward')[0];
        this.step_forward = document.querySelectorAll('#step_forward')[0];
        this.to_finish = document.querySelectorAll('#to_finish')[0];
        this.interval = false;

        var that = this;
        this.time_slider.addEventListener('change', function(arg) {
            console.log('time_slider change', arg);
            that.fleet.asAt(time_slider.value);
        });
        this.playpause.addEventListener('click', function(arg) {
            if (that.state === "PAUSED") {
                that.play();
            } else if (that.state === "PLAYING") {
                that.pause();
            }
        });
        this.to_start.addEventListener('click', function(arg) {
            if (that.state === "PLAYING") that.pause();
            that.pos = 0;
            that.step(0);
        });
        this.step_backward.addEventListener('click', function(arg) {
            if (that.state === "PLAYING") that.pause();
            that.step(-1);
        });
        this.step_forward.addEventListener('click', function(arg) {
            if (that.state === "PLAYING") that.pause();
            that.step(1);
        });
        this.to_finish.addEventListener('click', function(arg) {
            if (that.state === "PLAYING") that.pause();
            that.pos = -1;
            that.step(0);
        });

    }

    Player.prototype.play = function() {
        this.state = "PLAYING";
        var el = this.playpause_i;
        var className = 'fa-play';
        if (el.classList)
            el.classList.remove(className);
        else
            el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');

        className = 'fa-pause';
        if (el.classList)
            el.classList.add(className);
        else
            el.className += ' ' + className;

        if (this.interval) {
            clearInterval(this.interval);
            this.interval = false;
        }
        var that = this;
        this.interval = setInterval(function() {
            that.step(1);
        }, 200);
    }

    Player.prototype.pause = function() {
        this.state = "PAUSED";
        var el = this.playpause_i;
        var className = 'fa-pause';
        if (el.classList)
            el.classList.remove(className);
        else
            el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');

        className = 'fa-play';
        if (el.classList)
            el.classList.add(className);
        else
            el.className += ' ' + className;

        if (this.interval) {
            clearInterval(this.interval);
            this.interval = false;
        }
    }

    Player.prototype.step = function(dir) {
        var numSteps = this.fleet.allFixes.length;
        if (numSteps === 0) return;
        this.pos = mod(this.pos + dir, numSteps);
        this.time_slider.value = this.fleet.allFixes[this.pos].ts;
        this.fleet.asAt(this.fleet.allFixes[this.pos].ts);
    }

    function mod(a, b) {
        while (a < 0) {
            a += b;
        }
        while (a >= b) {
            a -= b;
        }
        return a;
    }

    function main() {
        var map = L.map('map').setView([51.505, -0.09], 11);
        var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
        var osmAttrib = 'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors';
        L.tileLayer(osmUrl, {minZoom: 1, maxZoom: 18, attribution: osmAttrib}).addTo(map);

        var csv_input = document.querySelectorAll('#csv_input')[0];
        var fleet = new Fleet(map, time_slider, time_slider_start, time_slider_finish);
        var player = new Player(fleet);
        csv_input.addEventListener('keyup', function(arg) {
            console.log('keyup');
            fleet.updateCsv(csv_input.value);
            fleet.asAt(Number.MAX_VALUE);
        });
        csv_input.addEventListener('change', function(arg) {
            console.log('change');
            fleet.updateCsv(csv_input.value);
            fleet.asAt(Number.MAX_VALUE);
        });
        csv_input.addEventListener('paste', function(arg) {
            console.log('paste');
            setTimeout(function() {
                fleet.updateCsv(csv_input.value);
                fleet.asAt(Number.MAX_VALUE);
            }, 200);
        });
        csv_input.addEventListener('cut', function(arg) {
            console.log('cut');
            setTimeout(function() {
                fleet.updateCsv(csv_input.value);
                fleet.asAt(Number.MAX_VALUE);
            }, 200);
        });
        csv_input.addEventListener('click', function(arg) {
            console.log('click');
            setTimeout(function() {
                fleet.updateCsv(csv_input.value);
                fleet.asAt(Number.MAX_VALUE);
            }, 200);
        });


        var map_div = document.querySelectorAll('#map_div')[0];
        var button_clear = document.querySelectorAll('#button_clear')[0];
        var capture_checkbox = document.querySelectorAll('#capture_checkbox')[0];
        capture_checkbox.checked = false;
        var capture_tag = document.querySelectorAll('#capture_tag')[0];
        var capture_latlng = document.querySelectorAll('#capture_latlng')[0];
        function handleMouseMove(event) {
            console.log('map mousemove', event.latlng);
            capture_latlng.innerHTML = event.latlng.lat.toFixed(6) + ',' + event.latlng.lng.toFixed(6);
        }
        function handleClick(event) {
            console.log('map mousemove', event.latlng);
            csv_input.value += '\n' + capture_tag.value + ',' + new Date().toISOString().substr(0,19) + 'Z,' + event.latlng.lat.toFixed(6) + ',' + event.latlng.lng.toFixed(6);
            csv_input.scrollTop = csv_input.scrollHeight;
            fleet.updateCsv(csv_input.value);
            fleet.asAt(Number.MAX_VALUE);
        }
        capture_checkbox.addEventListener('change', function(arg) {
            console.log('capture_checkbox', capture_checkbox.checked);
            if (capture_checkbox.checked) {
                map.on('mousemove', handleMouseMove);
                map.on('click', handleClick);
                document.getElementById('map').style.cursor = 'crosshair'
                fleet.scaleToFit = false;
            } else {
                map.off('mousemove', handleMouseMove);
                map.off('click', handleClick);
                document.getElementById('map').style.cursor = ''
                fleet.scaleToFit = true;
            }
        });
        button_clear.addEventListener('click', function() {
            csv_input.value = '';
            fleet.updateCsv(csv_input.value);
            fleet.asAt(Number.MAX_VALUE);
        });



        // display data when page loads
        fleet.updateCsv(csv_input.value);
        fleet.asAt(Number.MAX_VALUE);
    }

    main();

</script>
</body>
</html>
