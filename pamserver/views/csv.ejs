<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css"/>
    <link rel='stylesheet' href='/css/csv.css'/>
</head>
<body>
<div id="map"></div>
<div id="sidebar">
    <div id="title">
        <h1>cartochrono</h1>
        <h2>- it's map time</h2>
    </div>
    <div id="legend">
        Paste CSV data below.
    </div>
    <textarea id="csv_input">TAG0,1464208367,51.50,-0.09
TAG0,1464208377,51.51,-0.08
TAG1,1464208377,51.58,-0.02
TAG0,1464208387,51.52,-0.07
TAG1,1464208377,51.57,-0.03</textarea>
</div>
<script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
<script>
    var map = L.map('map').setView([51.505, -0.09], 11);
    var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
    var osmAttrib = 'Map data Â© <a href="http://openstreetmap.org">OpenStreetMap</a> contributors';
    L.tileLayer(osmUrl, {minZoom: 1, maxZoom: 18, attribution: osmAttrib}).addTo(map);

    var resources = {};
    var csv_input = document.querySelectorAll('#csv_input')[0];
    csv_input.addEventListener('keyup', function (arg) {
        console.log('keyup');
        resources = parse_input(csv_input.value);
        draw_multi_polyline(map, resources);
    });
    csv_input.addEventListener('change', function (arg) {
        console.log('change');
        resources = parse_input(csv_input.value);
        draw_multi_polyline(map, resources);
    });

    function parse_input(text) {
        console.log(text);
        var resources = {};
        var lines = text.split(/[\n\r]/);
        for (var i in lines) {
            var fields = lines[i].split(',');
            if (fields.length < 4) continue;
            var tag = fields[0];
            var fix = new Fix(tag, fields[1], fields[2], fields[3]);
            if (!resources[tag]) resources[tag] = new Resource(tag);
            resources[tag].addFix(fix);
        }
        return resources;
    }

    function draw_multi_polyline(map, resources) {
        var polylines = [];
        for (var tag in resources) {
            polylines.push(resources[tag].getPolyline());
        }
        L.multiPolyline(polylines).addTo(map);
    }

    function Fix(tag, ts, lat, lng) {
        this.tag = tag;
        this.ts = ts;
        this.lat = parseFloat(lat,10);
        this.lng = parseFloat(lng,10);
    }

    function Resource(tag) {
        this.tag = tag;
        this.fixes = [];
    }

    Resource.prototype.addFix = function(fix) {
        this.fixes.push(fix);
        // keep fixes sorted by timestamp
        this.fixes.sort(function(a, b) {
            if (a.ts > b.ts) return 1;
            if (a.ts < b.ts) return -1;
            return 0;
        });
    }

    Resource.prototype.getPolyline = function() {
        var polyline = [];
        for (var i in this.fixes) {
            var fix = this.fixes[i];
            polyline.push([fix.lat, fix.lng]);
        }
        return polyline;
    }
</script>
</body>
</html>
